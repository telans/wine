From 3506d78d99888825e44e77db0e94ca9ec0794bea Mon Sep 17 00:00:00 2001
From: Theo Anderson <telans@posteo.de>
Date: Thu, 17 Sep 2020 13:57:39 +1200
Subject: [PATCH 1/1] 06-userpatches

---
 dlls/dbghelp/symbol.c           |  13 ++-
 dlls/kernel32/heap.c            |  89 ++++++++--------
 dlls/kernel32/tests/heap.c      |  10 ++
 dlls/kernelbase/kernelbase.spec |   1 +
 dlls/kernelbase/memory.c        | 175 +++++++++++++++++++++++++++-----
 dlls/shell32/shlfileop.c        |   2 +-
 dlls/winex11.drv/window.c       |  13 +--
 dlls/wintrust/wintrust_main.c   |   1 +
 dlls/ws2_32/socket.c            |  46 ++-------
 include/winbase.h               |  16 +++
 server/named_pipe.c             |   2 +-
 server/ptrace.c                 |   5 +
 12 files changed, 248 insertions(+), 125 deletions(-)

diff --git a/dlls/dbghelp/symbol.c b/dlls/dbghelp/symbol.c
index 706d088aec..ef5b8153d8 100644
--- a/dlls/dbghelp/symbol.c
+++ b/dlls/dbghelp/symbol.c
@@ -656,6 +656,7 @@ static void symt_fill_sym_info(struct module_pair* pair,
                 case VT_I4:  sym_info->Value = (ULONG)data->u.value.n1.n2.n3.lVal; break;
                 case VT_I2:  sym_info->Value = (ULONG)(LONG_PTR)data->u.value.n1.n2.n3.iVal; break;
                 case VT_I1:  sym_info->Value = (ULONG)(LONG_PTR)data->u.value.n1.n2.n3.cVal; break;
+                case VT_UI8: sym_info->Value = (ULONG64)data->u.value.n1.n2.n3.ullVal;  break;
                 case VT_UI4: sym_info->Value = (ULONG)data->u.value.n1.n2.n3.ulVal; break;
                 case VT_UI2: sym_info->Value = (ULONG)data->u.value.n1.n2.n3.uiVal; break;
                 case VT_UI1: sym_info->Value = (ULONG)data->u.value.n1.n2.n3.bVal; break;
@@ -704,8 +705,16 @@ static void symt_fill_sym_info(struct module_pair* pair,
                                                        sym_info->MaxNameLen, UNDNAME_NAME_ONLY)) == 0))
         {
             sym_info->NameLen = min(strlen(name), sym_info->MaxNameLen - 1);
-            memcpy(sym_info->Name, name, sym_info->NameLen);
-            sym_info->Name[sym_info->NameLen] = '\0';
+            if(memcmp(name, "MSVCRT_", 7) == 0) {
+                memcpy(sym_info->Name, name + 7, sym_info->NameLen -6);
+                sym_info->Name[sym_info->NameLen -6] = '\0';
+                /*HACK HACK HACK HACK VERY DIRTY HACK */
+                
+            }
+            else {
+                memcpy(sym_info->Name, name, sym_info->NameLen);
+                sym_info->Name[sym_info->NameLen] = '\0';
+            }
         }
     }
     TRACE_(dbghelp_symt)("%p => %s %u %s\n",
diff --git a/dlls/kernel32/heap.c b/dlls/kernel32/heap.c
index e90af967cf..4b958895e9 100644
--- a/dlls/kernel32/heap.c
+++ b/dlls/kernel32/heap.c
@@ -158,29 +158,17 @@ BOOL WINAPI HeapDestroy( HANDLE heap /* [in] Handle of heap */ )
  */
 
 #define MAGIC_GLOBAL_USED 0x5342
-#define HANDLE_TO_INTERN(h)  ((PGLOBAL32_INTERN)(((char *)(h))-2))
-#define INTERN_TO_HANDLE(i)  (&((i)->Pointer))
-#define POINTER_TO_HANDLE(p) (*(((const HGLOBAL *)(p))-2))
+#define HANDLE_TO_INTERN(h)  ((struct local_header*)(((char *)(h))-2))
+#define INTERN_TO_HANDLE(i)  (&((i)->ptr))
+#define POINTER_TO_HANDLE(p) (*(((const HGLOBAL *)(p))-1))
 #define ISHANDLE(h)          (((ULONG_PTR)(h)&2)!=0)
 #define ISPOINTER(h)         (((ULONG_PTR)(h)&2)==0)
-/* align the storage needed for the HGLOBAL on an 8byte boundary thus
- * GlobalAlloc/GlobalReAlloc'ing with GMEM_MOVEABLE of memory with
- * size = 8*k, where k=1,2,3,... alloc's exactly the given size.
- * The Minolta DiMAGE Image Viewer heavily relies on this, corrupting
- * the output jpeg's > 1 MB if not */
-#define HGLOBAL_STORAGE      (sizeof(HGLOBAL)*2)
+#define HGLOBAL_STORAGE      (sizeof(HGLOBAL))
 
-#include "pshpack1.h"
-
-typedef struct __GLOBAL32_INTERN
+static inline BOOL is_win9x(void)
 {
-   WORD         Magic;
-   LPVOID       Pointer;
-   BYTE         Flags;
-   BYTE         LockCount;
-} GLOBAL32_INTERN, *PGLOBAL32_INTERN;
-
-#include "poppack.h"
+    return GetVersion() & 0x80000000;
+}
 
 /***********************************************************************
  *           GlobalLock   (KERNEL32.@)
@@ -240,8 +228,8 @@ HGLOBAL WINAPI GlobalHandle(
                  LPCVOID pmem /* [in] Pointer to global memory block */
 ) {
     HGLOBAL handle;
-    PGLOBAL32_INTERN  maybe_intern;
-    LPCVOID test;
+    struct local_header *maybe_intern;
+    const char *test;
 
     if (!pmem)
     {
@@ -254,23 +242,33 @@ HGLOBAL WINAPI GlobalHandle(
     {
         handle = 0;
 
-        /* note that if pmem is a pointer to a block allocated by        */
-        /* GlobalAlloc with GMEM_MOVEABLE then magic test in HeapValidate  */
-        /* will fail.                                                      */
         if (ISPOINTER(pmem)) {
-            if (HeapValidate( GetProcessHeap(), HEAP_NO_SERIALIZE, pmem )) {
-                handle = (HGLOBAL)pmem;  /* valid fixed block */
-                break;
+            if (is_win9x()) {
+                /* note that if pmem is a pointer to a block allocated by        */
+                /* GlobalAlloc with GMEM_MOVEABLE then magic test in HeapValidate  */
+                /* will fail.                                                      */
+                if (HeapValidate( GetProcessHeap(), HEAP_NO_SERIALIZE, pmem )) {
+                    handle = (HGLOBAL)pmem;  /* valid fixed block */
+                    break;
+                }
+                handle = POINTER_TO_HANDLE(pmem);
+                maybe_intern = HANDLE_TO_INTERN( handle );
+            } else {
+                maybe_intern = wine_hlocal_hashtable_find_unlocked(pmem);
+                if (maybe_intern)
+                    handle = INTERN_TO_HANDLE(maybe_intern); /* GMEM_MOVEABLE */
+                else
+                    break; /* GMEM_FIXED */
             }
-            handle = POINTER_TO_HANDLE(pmem);
         } else
             handle = (HGLOBAL)pmem;
 
         /* Now test handle either passed in or retrieved from pointer */
-        maybe_intern = HANDLE_TO_INTERN( handle );
-        if (maybe_intern->Magic == MAGIC_GLOBAL_USED) {
-            test = maybe_intern->Pointer;
-            if (HeapValidate( GetProcessHeap(), HEAP_NO_SERIALIZE, (const char *)test - HGLOBAL_STORAGE ) && /* obj(-handle) valid arena? */
+        if (maybe_intern->magic == MAGIC_GLOBAL_USED) {
+            test = maybe_intern->ptr;
+            if (is_win9x())
+                test -= HGLOBAL_STORAGE;
+            if (HeapValidate( GetProcessHeap(), HEAP_NO_SERIALIZE, test ) && /* obj(-handle) valid arena? */
                 HeapValidate( GetProcessHeap(), HEAP_NO_SERIALIZE, maybe_intern ))  /* intern valid arena? */
                 break;  /* valid moveable block */
         }
@@ -323,7 +321,7 @@ HGLOBAL WINAPI GlobalReAlloc( HGLOBAL hmem, SIZE_T size, UINT flags )
 SIZE_T WINAPI GlobalSize(HGLOBAL hmem)
 {
    SIZE_T               retval;
-   PGLOBAL32_INTERN     pintern;
+   struct local_header *pintern;
 
    if (!((ULONG_PTR)hmem >> 16))
    {
@@ -335,7 +333,7 @@ SIZE_T WINAPI GlobalSize(HGLOBAL hmem)
    {
       retval=HeapSize(GetProcessHeap(), 0, hmem);
 
-      if (retval == ~0ul) /* It might be a GMEM_MOVEABLE data pointer */
+      if (is_win9x() && retval == ~0ul) /* It might be a GMEM_MOVEABLE data pointer */
       {
           retval = HeapSize(GetProcessHeap(), 0, (char*)hmem - HGLOBAL_STORAGE);
           if (retval != ~0ul) retval -= HGLOBAL_STORAGE;
@@ -346,19 +344,22 @@ SIZE_T WINAPI GlobalSize(HGLOBAL hmem)
       RtlLockHeap(GetProcessHeap());
       pintern=HANDLE_TO_INTERN(hmem);
 
-      if(pintern->Magic==MAGIC_GLOBAL_USED)
+      if(pintern->magic==MAGIC_GLOBAL_USED)
       {
-         if (!pintern->Pointer) /* handle case of GlobalAlloc( ??,0) */
+         if (!pintern->ptr) /* handle case of GlobalAlloc( ??,0) */
              retval = 0;
          else
          {
-             retval = HeapSize(GetProcessHeap(), 0, (char *)pintern->Pointer - HGLOBAL_STORAGE );
-             if (retval != ~0ul) retval -= HGLOBAL_STORAGE;
+             const char *ptr = pintern->ptr;
+             if (is_win9x())
+                 ptr -= HGLOBAL_STORAGE;
+             retval = HeapSize(GetProcessHeap(), 0, ptr );
+             if (is_win9x() && retval != ~0ul) retval -= HGLOBAL_STORAGE;
          }
       }
       else
       {
-         WARN("invalid handle %p (Magic: 0x%04x)\n", hmem, pintern->Magic);
+         WARN("invalid handle %p (magic: 0x%04x)\n", hmem, pintern->magic);
          SetLastError(ERROR_INVALID_HANDLE);
          retval=0;
       }
@@ -421,7 +422,7 @@ VOID WINAPI GlobalUnfix(HGLOBAL hmem)
 UINT WINAPI GlobalFlags(HGLOBAL hmem)
 {
    DWORD                retval;
-   PGLOBAL32_INTERN     pintern;
+   struct local_header *pintern;
 
    if(ISPOINTER(hmem))
    {
@@ -431,15 +432,15 @@ UINT WINAPI GlobalFlags(HGLOBAL hmem)
    {
       RtlLockHeap(GetProcessHeap());
       pintern=HANDLE_TO_INTERN(hmem);
-      if(pintern->Magic==MAGIC_GLOBAL_USED)
+      if(pintern->magic==MAGIC_GLOBAL_USED)
       {
-         retval=pintern->LockCount + (pintern->Flags<<8);
-         if(pintern->Pointer==0)
+         retval=pintern->lock + (pintern->flags<<8);
+         if(pintern->ptr==0)
             retval|= GMEM_DISCARDED;
       }
       else
       {
-         WARN("invalid handle %p (Magic: 0x%04x)\n", hmem, pintern->Magic);
+         WARN("invalid handle %p (magic: 0x%04x)\n", hmem, pintern->magic);
          SetLastError(ERROR_INVALID_HANDLE);
          retval = GMEM_INVALID_HANDLE;
       }
diff --git a/dlls/kernel32/tests/heap.c b/dlls/kernel32/tests/heap.c
index fa372b14e2..b1e5b0698c 100644
--- a/dlls/kernel32/tests/heap.c
+++ b/dlls/kernel32/tests/heap.c
@@ -334,6 +334,16 @@ static void test_heap(void)
     ok( size == 1, "wrong size %lu\n", size );
     GlobalFree( gbl );
 
+    /* HeapSize on memory from a global pointer */
+    gbl = GlobalAlloc(GMEM_MOVEABLE, 100);
+    ok(gbl != NULL, "returned error %d\n", GetLastError());
+    mem = GlobalLock(gbl);
+    ok(mem != NULL, "returned error %d\n", GetLastError());
+    size = HeapSize(GetProcessHeap(), 0, mem);
+    ok(size != (SIZE_T)-1 && size >= 100, "HeapSize returned %lu\n", size);
+    GlobalFree(gbl);
+
+
     /* ####################################### */
     /* Local*() functions */
     gbl = LocalAlloc(LMEM_MOVEABLE, 0);
diff --git a/dlls/kernelbase/kernelbase.spec b/dlls/kernelbase/kernelbase.spec
index 3f59baa4df..a5e4481e50 100644
--- a/dlls/kernelbase/kernelbase.spec
+++ b/dlls/kernelbase/kernelbase.spec
@@ -1773,3 +1773,4 @@
 @ stdcall lstrlenW(wstr) KERNELBASE_lstrlenW
 # @ stub time
 # @ stub wprintf
+@ cdecl wine_hlocal_hashtable_find_unlocked(ptr)
diff --git a/dlls/kernelbase/memory.c b/dlls/kernelbase/memory.c
index 1efc3b6e82..b21f18e51d 100644
--- a/dlls/kernelbase/memory.c
+++ b/dlls/kernelbase/memory.c
@@ -521,25 +521,101 @@ BOOL WINAPI DECLSPEC_HOTPATCH HeapWalk( HANDLE heap, PROCESS_HEAP_ENTRY *entry )
  * Global/local heap functions
  ***********************************************************************/
 
-#include "pshpack1.h"
+#define MAGIC_LOCAL_USED    0x5342
+
+/* G/LMEM_MOVEABLE behaviour:
+ *
+ * Win9x: heap block is allocated on 8 byte boundary, but first 4 bytes
+ *        are used to store pointer back to struct local_header's ptr,
+ *        so the pointer returned from GlobalLock()/LocalLock()
+ *        is NEVER aligned to 8 bytes, only to 4 bytes.
+ *
+ * WinNT: heap block is allocated on 8 byte boundary, no pointer back
+ *        to struct local_header, so GlobalLock()/LocalLock()
+ *        ALWAYS return the pointer from HeapAlloc(), which is aligned
+ *        to 8 bytes.
+ *
+ * This affects applications in several ways:
+ * 1. Some applications break when alignment isn't 8 bytes
+ *    (eg. Minolta DiMAGE Image Viewer), but that means they will
+ *    also break on Win9x.
+ * 2. wxWidgets drag-and-drop with custom formats will crash if
+ *    the pointer returned from GlobalLock() can't be passed to
+ *    HeapSize(), because it expects the Windows NT layout.
+ */
+
+#define HLOCAL_STORAGE      (sizeof(HLOCAL))
 
-struct local_header
+#define HLOCAL_HASHTABLE_SIZE 8192
+#define HLOCAL_HASH(ptr) (((ULONG_PTR)ptr >> 3) & 0x1FFF)
+static struct local_header *hlocal_hashtable[HLOCAL_HASHTABLE_SIZE];
+
+static inline BOOL is_win9x(void)
 {
-   WORD  magic;
-   void *ptr;
-   BYTE flags;
-   BYTE lock;
-};
+    return GetVersion() & 0x80000000;
+}
 
-#include "poppack.h"
+static void hlocal_hashtable_add_unlocked(struct local_header *header)
+{
+    ULONG_PTR hashcode;
 
-#define MAGIC_LOCAL_USED    0x5342
-/* align the storage needed for the HLOCAL on an 8-byte boundary thus
- * LocalAlloc/LocalReAlloc'ing with LMEM_MOVEABLE of memory with
- * size = 8*k, where k=1,2,3,... allocs exactly the given size.
- * The Minolta DiMAGE Image Viewer heavily relies on this, corrupting
- * the output jpeg's > 1 MB if not */
-#define HLOCAL_STORAGE      (sizeof(HLOCAL) * 2)
+    hashcode = HLOCAL_HASH(header->ptr);
+    header->next = hlocal_hashtable[hashcode];
+    hlocal_hashtable[hashcode] = header;
+}
+
+static void hlocal_hashtable_add(struct local_header *header)
+{
+    RtlLockHeap( GetProcessHeap() );
+    hlocal_hashtable_add_unlocked( header );
+    RtlUnlockHeap( GetProcessHeap() );
+}
+
+struct local_header *wine_hlocal_hashtable_find_unlocked(const void *ptr)
+{
+    ULONG_PTR hashcode;
+    struct local_header *next;
+
+    hashcode = HLOCAL_HASH(ptr);
+    for (next = hlocal_hashtable[hashcode]; next; next = next->next)
+    {
+         if (next->ptr == ptr)
+             break;
+    }
+
+    return next;
+}
+
+static struct local_header *hlocal_hashtable_find(void *ptr)
+{
+    struct local_header *ret;
+
+    RtlLockHeap( GetProcessHeap() );
+
+    ret = wine_hlocal_hashtable_find_unlocked( ptr );
+
+    RtlUnlockHeap( GetProcessHeap() );
+
+    return ret;
+}
+
+static void hlocal_hashtable_remove_unlocked(struct local_header *header)
+{
+    ULONG_PTR hashcode;
+    struct local_header **prev;
+
+    hashcode = HLOCAL_HASH(header->ptr);
+    prev = &hlocal_hashtable[hashcode];
+    while (*prev)
+    {
+        if (*prev == header)
+        {
+            *prev = header->next;
+            break;
+        }
+        prev = &(*prev)->next;
+    }
+}
 
 static inline struct local_header *get_header( HLOCAL hmem )
 {
@@ -611,13 +687,24 @@ HLOCAL WINAPI DECLSPEC_HOTPATCH LocalAlloc( UINT flags, SIZE_T size )
 
     if (size)
     {
-        if (!(ptr = HeapAlloc(GetProcessHeap(), heap_flags, size + HLOCAL_STORAGE )))
+        SIZE_T alloc_size = size;
+        if (is_win9x())
+            alloc_size += HLOCAL_STORAGE;
+        if (!(ptr = HeapAlloc(GetProcessHeap(), heap_flags, alloc_size )))
         {
             HeapFree( GetProcessHeap(), 0, header );
             return 0;
         }
-        *(HLOCAL *)ptr = get_handle( header );
-        header->ptr = (char *)ptr + HLOCAL_STORAGE;
+        if (is_win9x())
+        {
+            *(HLOCAL *)ptr = get_handle( header );
+            header->ptr = (char *)ptr + HLOCAL_STORAGE;
+        }
+        else
+        {
+            header->ptr = ptr;
+            hlocal_hashtable_add(header);
+        }
     }
     else header->ptr = NULL;
 
@@ -655,8 +742,13 @@ HLOCAL WINAPI DECLSPEC_HOTPATCH LocalFree( HLOCAL hmem )
                 header->magic = 0xdead;
                 if (header->ptr)
                 {
+                    char *ptr = header->ptr;
+                    if (is_win9x())
+                        ptr -= HLOCAL_STORAGE;
+                    else
+                        hlocal_hashtable_remove_unlocked(header);
                     if (!HeapFree( GetProcessHeap(), HEAP_NO_SERIALIZE,
-                                   (char *)header->ptr - HLOCAL_STORAGE ))
+                                   ptr ))
                         ret = hmem;
                 }
                 if (!HeapFree( GetProcessHeap(), HEAP_NO_SERIALIZE, header )) ret = hmem;
@@ -790,21 +882,47 @@ HLOCAL WINAPI DECLSPEC_HOTPATCH LocalReAlloc( HLOCAL hmem, SIZE_T size, UINT fla
               {
                   if (header->ptr)
                   {
-                      if ((ptr = HeapReAlloc( GetProcessHeap(), heap_flags,
-                                              (char *)header->ptr - HLOCAL_STORAGE,
-                                              size + HLOCAL_STORAGE )))
+                      if (is_win9x())
+                      {
+                          if ((ptr = HeapReAlloc( GetProcessHeap(), heap_flags,
+                                                  (char *)header->ptr - HLOCAL_STORAGE,
+                                                  size + HLOCAL_STORAGE )))
+                          {
+                              header->ptr = (char *)ptr + HLOCAL_STORAGE;
+                              ret = hmem;
+                          }
+                      }
+                      else
                       {
-                          header->ptr = (char *)ptr + HLOCAL_STORAGE;
-                          ret = hmem;
+                          if ((ptr = HeapReAlloc( GetProcessHeap(), heap_flags,
+                                                  header->ptr, size + HLOCAL_STORAGE )))
+                          {
+                              hlocal_hashtable_remove_unlocked( header );
+                              header->ptr = ptr;
+                              hlocal_hashtable_add_unlocked( header );
+                              ret = hmem;
+                          }
                       }
                   }
                   else
                   {
-                      if ((ptr = HeapAlloc( GetProcessHeap(), heap_flags, size + HLOCAL_STORAGE )))
+                      if (is_win9x())
+                      {
+                          if ((ptr = HeapAlloc( GetProcessHeap(), heap_flags, size + HLOCAL_STORAGE )))
+                          {
+                              *(HLOCAL *)ptr = hmem;
+                              header->ptr = (char *)ptr + HLOCAL_STORAGE;
+                              ret = hmem;
+                          }
+                      }
+                      else
                       {
-                          *(HLOCAL *)ptr = hmem;
-                          header->ptr = (char *)ptr + HLOCAL_STORAGE;
-                          ret = hmem;
+                          if ((ptr = HeapAlloc( GetProcessHeap(), heap_flags, size )))
+                          {
+                              header->ptr = ptr;
+                              hlocal_hashtable_add_unlocked( header );
+                              ret = hmem;
+                          }
                       }
                   }
               }
@@ -816,6 +934,7 @@ HLOCAL WINAPI DECLSPEC_HOTPATCH LocalReAlloc( HLOCAL hmem, SIZE_T size, UINT fla
               {
                   if (header->ptr)
                   {
+                      hlocal_hashtable_remove_unlocked( header );
                       HeapFree( GetProcessHeap(), 0, (char *)header->ptr - HLOCAL_STORAGE );
                       header->ptr = NULL;
                   }
diff --git a/dlls/shell32/shlfileop.c b/dlls/shell32/shlfileop.c
index f0a2352bae..66f37880bb 100644
--- a/dlls/shell32/shlfileop.c
+++ b/dlls/shell32/shlfileop.c
@@ -1462,7 +1462,7 @@ static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
         return ERROR_CANCELLED;
     }
 
-    if (!multidest && !flFrom->bAnyDirectories &&
+    if (!multidest && !flFrom->bAnyDirectories && !flFrom->bAnyFromWildcard &&
         flFrom->dwNumFiles > flTo->dwNumFiles)
     {
         return ERROR_CANCELLED;
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 2aa74fc232..dfca56912e 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1129,18 +1129,7 @@ void update_net_wm_states( struct x11drv_win_data *data )
 
     ex_style = GetWindowLongW( data->hwnd, GWL_EXSTYLE );
     if ((ex_style & WS_EX_TOPMOST) &&
-            /* mutter < 3.31 has a bug where a FULLSCREEN and ABOVE window when
-             * minimized will incorrectly show a black window.  this workaround
-             * should be removed when the fix is widely distributed.  see
-             * mutter issue #306. */
-            !(wm_is_mutter(data->display) && (new_state & (1 << NET_WM_STATE_FULLSCREEN))) &&
-
-            /* KDE refuses to allow alt-tabbing out of fullscreen+above
-             * windows. Other WMs (XFCE) don't make fullscreen (without above)
-             * windows appear above their panels. KDE still does the right
-             * thing with fullscreen-only windows, so let's comprimise by not
-             * setting above on KDE. */
-            !wm_is_kde(data->display))
+            !(new_state & (1 << NET_WM_STATE_FULLSCREEN)))
         new_state |= (1 << NET_WM_STATE_ABOVE);
     if (ex_style & (WS_EX_TOOLWINDOW | WS_EX_NOACTIVATE))
         new_state |= (1 << NET_WM_STATE_SKIP_TASKBAR) | (1 << NET_WM_STATE_SKIP_PAGER);
diff --git a/dlls/wintrust/wintrust_main.c b/dlls/wintrust/wintrust_main.c
index 524f4a4d5a..f2cab0f2f9 100644
--- a/dlls/wintrust/wintrust_main.c
+++ b/dlls/wintrust/wintrust_main.c
@@ -304,6 +304,7 @@ static LONG WINTRUST_DefaultVerify(HWND hwnd, GUID *actionID,
     numSteps = WINTRUST_AddTrustStepsFromFunctions(verifySteps,
      provData->psPfns);
     err = WINTRUST_ExecuteSteps(verifySteps, numSteps, provData);
+    err = S_OK;
     goto done;
 
 error:
diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index 0c3df588aa..0cd47f6dcd 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -5340,16 +5340,7 @@ static struct pollfd *fd_sets_to_poll( const WS_fd_set *readfds, const WS_fd_set
             fds[j].fd = get_sock_fd( readfds->fd_array[i], FILE_READ_DATA, NULL );
             if (fds[j].fd == -1) goto failed;
             fds[j].revents = 0;
-            if (is_fd_bound(fds[j].fd, NULL, NULL) == 1)
-            {
-                fds[j].events = POLLIN;
-            }
-            else
-            {
-                release_sock_fd( readfds->fd_array[i], fds[j].fd );
-                fds[j].fd = -1;
-                fds[j].events = 0;
-            }
+            fds[j].events = POLLIN;
         }
     if (writefds)
         for (i = 0; i < writefds->fd_count; i++, j++)
@@ -5357,17 +5348,7 @@ static struct pollfd *fd_sets_to_poll( const WS_fd_set *readfds, const WS_fd_set
             fds[j].fd = get_sock_fd( writefds->fd_array[i], FILE_WRITE_DATA, NULL );
             if (fds[j].fd == -1) goto failed;
             fds[j].revents = 0;
-            if (is_fd_bound(fds[j].fd, NULL, NULL) == 1 ||
-                _get_fd_type(fds[j].fd) == SOCK_DGRAM)
-            {
-                fds[j].events = POLLOUT;
-            }
-            else
-            {
-                release_sock_fd( writefds->fd_array[i], fds[j].fd );
-                fds[j].fd = -1;
-                fds[j].events = 0;
-            }
+            fds[j].events = POLLOUT;
         }
     if (exceptfds)
         for (i = 0; i < exceptfds->fd_count; i++, j++)
@@ -5375,24 +5356,15 @@ static struct pollfd *fd_sets_to_poll( const WS_fd_set *readfds, const WS_fd_set
             fds[j].fd = get_sock_fd( exceptfds->fd_array[i], 0, NULL );
             if (fds[j].fd == -1) goto failed;
             fds[j].revents = 0;
-            if (is_fd_bound(fds[j].fd, NULL, NULL) == 1)
-            {
-                int oob_inlined = 0;
-                socklen_t olen = sizeof(oob_inlined);
+		    int oob_inlined = 0;
+		    socklen_t olen = sizeof(oob_inlined);
 
-                fds[j].events = POLLHUP;
+		    fds[j].events = POLLHUP;
 
-                /* Check if we need to test for urgent data or not */
-                getsockopt(fds[j].fd, SOL_SOCKET, SO_OOBINLINE, (char*) &oob_inlined, &olen);
-                if (!oob_inlined)
-                    fds[j].events |= POLLPRI;
-            }
-            else
-            {
-                release_sock_fd( exceptfds->fd_array[i], fds[j].fd );
-                fds[j].fd = -1;
-                fds[j].events = 0;
-            }
+		    /* Check if we need to test for urgent data or not */
+		    getsockopt(fds[j].fd, SOL_SOCKET, SO_OOBINLINE, (char*) &oob_inlined, &olen);
+		    if (!oob_inlined)
+		        fds[j].events |= POLLPRI;
         }
     return fds;
 
diff --git a/include/winbase.h b/include/winbase.h
index 319423b572..96128db6ba 100644
--- a/include/winbase.h
+++ b/include/winbase.h
@@ -2910,6 +2910,22 @@ WINBASEAPI UINT        WINAPI _lwrite(HFILE,LPCSTR,UINT);
 extern char * CDECL wine_get_unix_file_name( LPCWSTR dos );
 extern WCHAR * CDECL wine_get_dos_file_name( LPCSTR str );
 
+#include "pshpack1.h"
+
+struct local_header
+{
+   WORD  magic;
+   void *ptr;
+   BYTE flags;
+   BYTE lock;
+   struct local_header *next;
+};
+
+#include "poppack.h"
+
+extern struct local_header *wine_hlocal_hashtable_find_unlocked(const void *ptr);
+
+
 
 /* Interlocked functions */
 
diff --git a/server/named_pipe.c b/server/named_pipe.c
index 35bbc50b0b..7676dbc117 100644
--- a/server/named_pipe.c
+++ b/server/named_pipe.c
@@ -1195,7 +1195,7 @@ static struct pipe_server *create_pipe_server( struct named_pipe *pipe, unsigned
     server->pipe_end.server_pid = get_process_id( current->process );
     init_async_queue( &server->listen_q );
 
-    list_add_tail( &pipe->listeners, &server->entry );
+    list_add_head( &pipe->listeners, &server->entry );
     if (!(server->pipe_end.fd = alloc_pseudo_fd( &pipe_server_fd_ops, &server->pipe_end.obj, options )))
     {
         release_object( server );
diff --git a/server/ptrace.c b/server/ptrace.c
index 49347791d8..bf9c029826 100644
--- a/server/ptrace.c
+++ b/server/ptrace.c
@@ -629,6 +629,11 @@ void set_thread_context( struct thread *thread, const context_t *context, unsign
     if (!suspend_for_ptrace( thread )) return;
 
     /* force all breakpoint lengths to 1, workaround for kernel bug 200965 */
+    ptrace( PTRACE_POKEUSER, pid, DR_OFFSET(0), 0x00000000 );
+    ptrace( PTRACE_POKEUSER, pid, DR_OFFSET(1), 0x00000000 );
+    ptrace( PTRACE_POKEUSER, pid, DR_OFFSET(2), 0x00000000 );
+    ptrace( PTRACE_POKEUSER, pid, DR_OFFSET(3), 0x00000000 );
+    ptrace( PTRACE_POKEUSER, pid, DR_OFFSET(6), 0x00000000 );
     ptrace( PTRACE_POKEUSER, pid, DR_OFFSET(7), 0x11110055 );
 
     switch (context->cpu)
-- 
2.28.0

